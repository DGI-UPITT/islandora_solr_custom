<?php

// $Id$


/**
 * @file
 * Configuration module for islandora_solr_search.module
 */

/**
 * Implementations of hook_init()
 * Including css for the admin page.
 */
 
function islandora_solr_custom_init() {
  // adds css. I should look for an alternative place to load this because hook_init() will load this on every page.
  drupal_add_css(drupal_get_path('module', 'islandora_solr_custom') .'/css/islandora_solr_custom.css');

  // add the .inc file
  module_load_include('inc', 'islandora_solr_custom', 'islandora_solr_custom.admin');
}



/**
 * Implements hook_islandora_solr_primary_display()
 */
function islandora_solr_custom_islandora_solr_primary_display() {
  return array(
    // 'machine-name' = array(
    //   'name' => 'Human Readable Name',
    //   'module' => 'module_name',
    //   'file' => 'FileName.inc',
    //   'class' => 'ClassName',
    //   'function' => 'function_name',
    //   'description' => 'A description of the display profile',
    // );
    'custom' => array(
      'name' => t('Custom'),
      'module' => 'islandora_solr_custom',
      'file' => 'IslandoraSolrResultsCustom.inc',
      'class' => "IslandoraSolrResultsCustom",
      'function' => "displayResults",
      'description' => t("Take full controll over the markup of the Solr results."),
    ),
  );
}



/**
 * Implementation of hook_help()
 */

function islandora_solr_custom_help($path, $arg) {

  switch ($path) {
    case 'admin/help#islandora_solr_config':
      return t('The islandora_solr_custom module provides a display type for the islandora_solr_search module. It automatically looks for the fields set for display in !solrconfig and outputs the fields in the order that they are defined in the requestHandler. Islandora_solr_custom will look at the settings set at !page to find solrconfig.xml and the requestHandler. You can quickly customize the output style of your search results by changing the settings in the admin section or you can take full control by overriding the template file.', array('!page' => l(t("Islandora_solr_search configuration page"), 'admin/settings/islandora_solr_search'), '!solrconfig' => l(t('solrconfig.xml'), 'http://wiki.apache.org/solr/SolrConfigXml') ));
    case 'admin/settings/islandora_solr_search/custom':
      return t('The islandora_solr_custom module provides a display type for the islandora_solr_search module. It automatically looks for the fields set for display in !solrconfig and outputs the fields in the order that they are defined in the requestHandler. Islandora_solr_custom will look at the settings set at !page to find solrconfig.xml and the requestHandler. You can quickly customize the output style of your search results by changing the settings in the admin section or you can take full control by overriding the template file.', array('!page' => l(t("Islandora_solr_search configuration page"), 'admin/settings/islandora_solr_search'), '!solrconfig' => l(t('solrconfig.xml'), 'http://wiki.apache.org/solr/SolrConfigXml') ));
  }
}


/**
 * Implementation of hook_menu()
 */
 
function islandora_solr_custom_menu() {
  $items['admin/settings/islandora_solr_search/config'] = array(
    'title' => 'Islandora Solr Client',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file path' => drupal_get_path('module', 'islandora_solr_search'),
    'weight' => -1,
  );
  $items['admin/settings/islandora_solr_search/custom'] = array(
    'title' => 'Islandora Solr customization',
    'description' => 'Customizing Islandora Solr output results',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_solr_custom_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'islandora_solr_custom.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}




/**
 * Implementation of hook_theme()
 */
 
 function islandora_solr_custom_theme() {
   return array(
     'islandora_solr_custom' => array(
       'template' => 'islandora_solr_custom',
       'arguments' => array('results_raw' => NULL),
     ),
     'islandora_solr_custom_admin_settings' => array(
       'arguments' => array('form' => NULL),
     ),
     'islandora_solr_custom_switch' => array(
       'arguments' => array('curr_url' => NULL),
     ),
     'islandora_solr_custom_table' => array(
       'arguments' => array('db_values' => NULL, 'results' => NULL),
     ),
   );
 
 }
 
 
 
/**
 * Theme function for theming the admin table
 * @return rendered table
 */
 
function theme_islandora_solr_custom_admin_settings($form) {

  $rows = array();
  foreach ($form['islandora_solr_custom_table'] as $key) {
    $row = array();
    // check if $key is really the array we need. we shouldn't select the #parent array for example.
    if (isset($key['field']['#type'])) {
 
      $row[] = array('data' => drupal_render($key['field']));
      $row[] = array('data' => drupal_render($key['label']));
      $row[] = array('data' => drupal_render($key['exclude_label']));
      $row[] = array('data' => drupal_render($key['markup']));
 
      $rows[] = $row;
    }
  }
  $form['islandora_solr_custom_table']['#access'] = FALSE; // don't unset $form['anything'] , use $form['anything']['#access'] = FALSE; instead!
 
  // Individual table headers.
  $header = array();
  $header[] = t('solr field');
  $header[] = t('label');
  $header[] = t('exclude label?');
  $header[] = t('show markup when empty?');
  
  // put the rendered table in another fieldset.
  $form['islandora_solr_custom_table_output']['table_output_markup']['#value'] = theme('table', $header, $rows);
  
  $output = '';
  $output .= drupal_render($form);
  
  return $output;
}
 
 
 
 
 /**
  * Theme function for theming the solr search results
  *
  * @param $results
  * The raw search results
  *
  * @return variables to be used in the template file.
  */
  
function islandora_solr_custom_preprocess_islandora_solr_custom(&$variables) {
  // base url
  global $base_url;
  $variables['base_url'] = $base_url;
  // include solr field order generated from solrconfig.xml
  $variables['field_order'] = _islandora_solr_custom_solrconfig(); // not sure if this is really needed, but I'll keep it in for now.
  // this variable might be more useful as the db values are parsed in the solrconfig order using the results of _islandora_solr_custom_solrconfig().
  // get the solrconfig.xml and DB results. Don't check or fix any differences between solrconfig.xml and the DB
  $variables['db_values'] = _islandora_solr_custom_db_values($check = FALSE);
  $db_values = $variables['db_values'];
  $variables['display'] = variable_get('islandora_solr_custom_display', 'div');
  $variables['display_url'] = (isset($_GET['display']) ? $_GET['display'] : NULL);
  $variables['table_rendered'] = ''; // set the variable. If the table style is selected, this variable will be populated with a rendered table.
  $variables['switch'] = variable_get('islandora_solr_custom_switch', 0);
  $variables['switch_rendered'] = ''; // set the variable. If the display switch is enabled, this variable will be populated with a rendered link.
  $variables['css'] = variable_get('islandora_solr_custom_css', 1);

  // set $variables['style'];
  $variables['style'] = '';
  if ($variables['display_url'] != NULL) {
    if ($variables['display_url'] == 'div') {
      $variables['style'] = 'div';
    }
    elseif ($variables['display_url'] == 'table') {
      $variables['style'] = 'table';
    }
    else {
    $variables['style'] = $variables['display'];
    }
  }
  else {
    $variables['style'] = $variables['display'];
  }
  
  // include css or not
  $css = variable_get('islandora_solr_custom_css', 1);
  if ($css == 1) {
    drupal_add_css(drupal_get_path('module', 'islandora_solr_custom') .'/css/islandora_solr_custom_tpl.css');
  }
  
  
  // go over each search result object
  foreach ($variables['results_raw']->response->docs as $doc) {
  
    $resultsArray = array();
    // go over each field within a search result object
    foreach ($db_values as $db_value) {
      if (isset($doc->$db_value['field'])) {
        $value = $doc->$db_value['field'];
        $field = $db_value['field'];
      
        if (is_array($value)) {
          $value = implode(", ", $value);
        }
        // set the fields
        $resultsArray[$field]['value'] = $value;  
        $resultsArray[$field]['label'] = $db_value['label'];
        $resultsArray[$field]['class'] = strtolower( preg_replace('/[^A-Za-z0-9]/', '-', $db_value['field']) ); // turn the field name in a string that is appropriate to use as a class name.
        $resultsArray[$field]['exclude_label'] = $db_value['exclude_label'];
        $resultsArray[$field]['markup'] = $db_value['markup'];
      }
    }

  $variables['results'][] = $resultsArray;
  }
  
  
  // if 'display' is set to table, render the table.
  if ($variables['style'] == 'table') {
    if ($variables['results'] != '') {
    
      $db_values = $variables['db_values'];
      $results = $variables['results'];
    
      $output = theme('islandora_solr_custom_table', $db_values, $results );
    }
    else {
      $output = '<p>' . t('Your search yielded no results') . '</p>';
    }
    $variables['table_rendered'] = $output;
  }
  
  // if display switch is set, render the link
  if ($variables['switch'] == 1  AND $variables['results'] != '') {

    $display = ''; // set $display
    
      $db_display = $variables['display'];
      $switch_style = ''; // this is will be the oposite display style than then one enabled.
      if ($db_display == 'table') {
        $switch_style = 'div';
      }
      elseif ($db_display == 'div') {
        $switch_style = 'table';
      }

    

    if (isset($_GET['display'])) {
      if ($_GET['display'] == 'table') {
        $display = 'div';
      }
      elseif ($_GET['display'] == 'div') {
        $display = 'table';
      }
      else {
        $display = $switch_style; // if the display style is not properly set in the url, choose the oposite of the one enabled in the DB.
      }    
    }
    else {
      $display = $switch_style; // if the display style is not set in the url, choose the oposite of the one enabled in the DB.
    }
    
    $curr_url = $base_url . request_uri();

    if (isset($_GET['page'])) {
      $curr_url = str_replace('&display=' . $_GET['display'], '', $curr_url);
      $curr_url = $curr_url . '&display=' . $display;
    }
    else {
      $curr_url = str_replace('?display=' . $_GET['display'], '', $curr_url);
      $curr_url = $curr_url . '?display=' . $display;
    }

    $variables['switch_rendered'] = theme('islandora_solr_custom_switch', $curr_url);
  
  }
}



/**
 * Theme function for theming the switch link.
 * The theme function is really minimal, but allows for overriding they way the switch is themed.
 *
 * @return rendered switch link
 */
 
function theme_islandora_solr_custom_switch($curr_url) {

  return l(t('Switch display'), $curr_url);

}



/**
 * Theme function for theming the table display.
 *
 * @return rendered table display
 */
 
function theme_islandora_solr_custom_table($db_values, $results) {
  $output = '';
    // Table headers.
    $header = array();
    foreach ($db_values as $key => $result) {
      if ($result['exclude_label'] == 0) {
        $header[] = array(
                      'data' => t($result['label']),
                      //'field' => $result['field'], // I guess sorting is only possible when the result is fetched from the DB.
                    );
      }
      else {
        $header[] = '';
      }
    }
    // Table rows
    $rows = array();
    foreach ($results as $key => $result) {
      $row = array();

      foreach ($result as $key => $value) {
        $row[] = array(
                  'data' => $value['value'],
                 );
      }
      $rows[] = $row;
    }
    
    $output = theme('table', $header, $rows);

  return $output;
}


/**
 * Function to render the custom markup
 * @return uses the given solr fields to render sample code to copy into islandora_solr_custom.tpl.php
 */
 
function _islandora_solr_custom_markup_render($markup) {

  $output = '';
  
  $output .= '<div class="form-item">';
  $output .= '<pre>';
  $output .= _islandora_solr_custom_markup_div($markup);
  $output .= '</pre>';
  $output .= '</div>'; 
  return $output;
}

/**
 * Function to render the div markup
 * @return div markup
 */
 
function _islandora_solr_custom_markup_div($markup) {

  // split $markup into arrays
  // $markup = nl2br($markup);
  //$markup = explode("\r\n", $markup);
  // $markup = str_replace("\r\n", '', $markup);
  
  // set $output variable
  $output = '';
  
  $output .= '<?php
// $Id $
/**
 * @file islandora_solr_custom.tpl.php
 * Islandora solr search results template
 *
 * Variables available:
 * - $variables: all array elements of $variables can be used as a variable. e.g. $base_url equals $variables[\'base_url\']
 * - $base_url: The base url of the current website. eg: http://example.com .
 * - $user: The user object.
 *
 * - $style: the style of the display (\'div\' or \'table\'). Set in admin page by default. Overridden by the query value: ?display=foo
 * - $results: the array containing the solr search results
 * - $table_rendered: If the display style is set to \'table\', this will contain the rendered table.
 *    For theme overriding, see: theme_islandora_solr_custom_table() 
 * - $switch_rendered: The rendered switch to toggle between display styles
 *    For theme overriding, see: theme_islandora_solr_custom_switch() 
 *
 */
?>

<?php print $switch_rendered; ?>

<?php if ($style == \'div\'): ?>

<ul class="islandora_solr_results">
<?php foreach ($results as $id => $result): ?>
  <li class="islandora_solr_result">
  ';
  
  foreach ($markup as $field) {
  
  $output .= '  <div class="solr-field <?php print $result[\'' . $field . '\'][\'class\']; ?>">  
      <div class="label"><label><?php print t($result[\'' . $field . '\'][\'label\']); ?></label></div>
      <div class="value"><?php print $result[\'' . $field . '\'][\'value\']; ?></div>
    </div>
  ';
  }
  
  $output .= '</li>
<?php endforeach; ?>
</ul>

<?php elseif ($style == \'table\'): ?>

  <?php print $table_rendered; ?>

<?php endif; ?>';

  return check_plain($output);
}

